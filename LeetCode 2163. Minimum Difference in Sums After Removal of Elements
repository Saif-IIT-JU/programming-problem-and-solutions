class Solution {
public:
    long long minimumDifference(vector<int>& nums) {
       long long m, n, i, j; m = nums.size(); n=  m/3;
        vector<long long>tmp(m+9);
        priority_queue<int>L;
        priority_queue<int, vector<int>, greater<int> >R; 
        
        long long sum = 0, ans = 1e18;
        for(i=m; i>n; i--)
        {
            sum+=nums[i-1]; R.push(nums[i-1]);
            if(R.size()>n){
                sum-=R.top(); R.pop();
            }
            if(R.size()==n) tmp[i] = sum;
            
           // cout<<i<<" "<<sum<<endl;
        }
        
        sum = 0;
        for(i=1; i<=m-n; i++)
        {
            sum+=nums[i-1]; L.push(nums[i-1]);
            if(L.size()>n){
                sum-=L.top(); L.pop();
            }
            if(L.size()==n){
                ans = min(ans, sum-tmp[i+1]);
            }
            
            //cout<<i<<" "<<sum<<" "<<tmp[i+1]<<endl;
        }
        
        return ans;
    }
};
