class Solution {
public:
    struct node{
        ListNode* nd;
        node(ListNode* ndd){
            nd = ndd;
        }
        bool operator<(const node &ndd)const
        {
            return nd->val > ndd.nd->val;
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<node>pq; int n = lists.size();
        ListNode *root, *prev, *curr;
        
        for(int i=0; i<n; i++)
        {
            if(lists[i]==NULL) continue;
            curr = lists[i];
            while(curr!=NULL){
                pq.push(node(curr));
                curr = curr->next;
            }
        }
        
        if(pq.size()==0) return NULL;
        
        root = prev = pq.top().nd; pq.pop();
        while(!pq.empty())
        {
            ListNode* curr = pq.top().nd; pq.pop();
           // cout<<curr->val<<endl;
            prev->next = curr; prev = curr;
        }
       
        prev->next = NULL;
        
        return root;
    }
};
