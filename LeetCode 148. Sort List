/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        
        ListNode *mid = findMiddle(head);
        
        ListNode *left = sortList(head);
        ListNode  *right = sortList(mid);
        return merge(left, right);
    }
    
    ListNode* merge(ListNode* list1, ListNode* list2)
    {
        ListNode *head = NULL, *ptr;
        
        while(list1 && list2){
            if(list1->val < list2->val){
                if(head==NULL){ head = list1; ptr = list1; }
                else{ ptr->next = list1; ptr = ptr->next; }
                list1 = list1->next;
            }
            else{
                if(head==NULL){
                    head = list2; ptr = list2;
                }
                else{ ptr->next = list2; ptr = ptr->next; }
                list2 = list2->next;
            }
        }
        if(list1) ptr->next = list1;
        else if(list2) ptr->next = list2;
        
        return head;
    }
    
    ListNode* findMiddle(ListNode *head){
        ListNode *prev = NULL;
        while(head && head->next){
            if(prev==NULL) prev = head;
            else prev = prev->next;
            head = head->next->next;
        }
        
        ListNode* mid = prev->next;
        prev->next = NULL;
        return mid;
    }
};
