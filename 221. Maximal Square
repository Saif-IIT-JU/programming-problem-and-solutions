class Solution {
    public int maximalSquare(char[][] matrix) {
        int n = matrix.length, m = matrix[0].length, i, j, l, r, mid;
        int arr[][] = new int[n+9][m+9];
        
        for(i=0; i<=n; i++)
        {
            for(j=0; j<=m; j++)
                arr[i][j] = 0;
        }
        
        for(i=1; i<=n; i++)
        {
            for(j=1; j<=m; j++)
            {
                char c = matrix[i-1][j-1];
                if(c=='1')
                    arr[i][j] = 1;
                else arr[i][j] = 0;
            }
        }
        
        for(i=1; i<=n; i++)
        {
            for(j=1; j<=m; j++)
            {
                arr[i][j]+=arr[i-1][j]+arr[i][j-1]-arr[i-1][j-1];
            }
        }
        
        int ans = 0;
        
        for(i=1; i<=n; i++)
        {
            for(j=1; j<=m; j++)
            {
                int ret = 0; l = 1; r = Math.min(n-i+1, m-j+1);
                
                while(l<=r){
                    mid = (l+r)/2;
                    int x = i+mid-1, y = j+mid-1;
                    
                    int sum = arr[x][y] - arr[i-1][y] - arr[x][j-1] + arr[i-1][j-1];
                    if(sum<mid*mid)
                        r = mid-1;
                    else
                    {
                        l = mid+1; ret = mid;
                    }
                }
                
                ans = Math.max(ans, ret*ret);
            }
        }
        
        return ans;
    }
}
