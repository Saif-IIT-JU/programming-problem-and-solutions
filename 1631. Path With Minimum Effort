class node implements Comparable<node>
{
    int r, c, w;
    node (int r, int c, int w)
    {
        this.r = r;
        this.c = c;
        this.w = w;
    }
    
    public int compareTo(node nd)
    {
        return this.w - nd.w;
    }
}

class Solution {
    int dx[] = {0, 0, 1, -1};
    int dy[] = {1, -1, 0, 0};
    
    public int minimumEffortPath(int[][] heights) {
        
        int n = heights.length, m = heights[0].length, i, j;
        
        int dis[][] = new int[n][m];
        
        for(i=0; i<n; i++)
        {
            for(j=0; j<m; j++)
            {
                dis[i][j] = 100000099;
            }
        }
        
        dis[0][0] = 0;
        
        PriorityQueue<node>pq = new PriorityQueue<node>();
        
        pq.add(new node(0,0,0));
        
        while(pq.isEmpty()==false)
        {
            node u = pq.poll();
            
            int costs = dis[u.r][u.c];
            
            for(int k=0; k<4; k++)
            {
                int x = u.r + dx[k];
                int y = u.c + dy[k];
                
                if(OK(x, y, n, m))
                {
                    int newCost = Math.max(costs, Math.abs(heights[u.r][u.c]-heights[x][y]));
                    if(newCost < dis[x][y]){
                    dis[x][y] = newCost;
                    pq.add(new node(x, y, dis[x][y]));
                    }
                }
            }
        }
        
        return dis[n-1][m-1];
    }
    
    boolean OK(int x, int y, int n, int m)
    {
        if(x>=0 && x<n && y>=0 && y<m) return true;
        return false;
    }
}
