/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL) return 0;
        
        int ans = 0;
        queue<pair<TreeNode*, int> >q; q.push({root, 0});
        
        while(!q.empty()){
            int start = q.front().second;
            int en = q.back().second;
            
            ans = max(ans, en-start+1);
            int sz = q.size();
            for(int i=0; i<sz; i++)
            {
                pair<TreeNode*, int>u = q.front(); q.pop();
                int idx = u.second-start;
                
                if(u.first->left!=NULL) q.push({u.first->left, (long long)2*idx+1});
                if(u.first->right!=NULL) q.push({u.first->right, (long long)2*idx+2});
            }
        }
        
        return ans;
    }
};
