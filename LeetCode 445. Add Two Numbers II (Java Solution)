/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    ListNode reverseLinkedList(ListNode root)
    {
        ListNode prev = root, curr = root.next, next; root.next = null;
        
        while(curr!=null)
        {
            next = curr.next;
            
            curr.next = prev; prev = curr; curr = next;
        }
        
        return prev;
    }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseLinkedList(l1);  l2 = reverseLinkedList(l2);
        
        ListNode root = null, curr= null; int tot = 0, carry = 0, i;
        
        while(true)
        {
            if(l1==null && l2==null) break;
            
            int dgt1 = 0, dgt2 = 0;
            if(l1!=null){
                dgt1 = l1.val; l1 = l1.next;
            }
            if(l2!=null){
                dgt2 = l2.val; l2 = l2.next;
            }
            
            tot = dgt1+dgt2+carry; carry = tot/10; tot%=10;
            
            if(root==null){
                root = new ListNode(tot); curr = root;
            }
            else
            {
                curr.next = new ListNode(tot); curr = curr.next;
            }
        }
        
        if(carry>0){
            curr.next = new ListNode(carry); curr = curr.next;
        }
        curr = null;
        
        return reverseLinkedList(root);
    }
}
