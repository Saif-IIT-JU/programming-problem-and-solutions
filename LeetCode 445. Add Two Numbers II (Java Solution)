/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ArrayList<Integer>num1 = new ArrayList<Integer>();
        ArrayList<Integer>num2 = new ArrayList<Integer>();
        ArrayList<Integer>ans = new ArrayList<Integer>();
        
        while(l1!=null)
        {
            num1.add(l1.val); l1 = l1.next;
        }
        while(l2!=null)
        {
            num2.add(l2.val); l2 = l2.next;
        }
        
        Collections.reverse(num1); Collections.reverse(num2);
        
        int n = num1.size(), m = num2.size(); int l = Math.max(n, m);
        int carry = 0, i, tot; ListNode root=null, curr=null;
        
        for(i=0; i<l; i++)
        {
            int digit1 = 0, digit2 = 0;
            if(i<n) digit1 = num1.get(i);
            if(i<m) digit2 = num2.get(i);
            
            tot = digit1+digit2 + carry; carry = tot/10; tot%=10;
            
            ans.add(tot);
        }
        
        if(carry>0) {ans.add(carry);}
        
        Collections.reverse(ans);
        
        for(i=0; i<ans.size(); i++)
        {
            tot = ans.get(i);
            if(root==null)
            {
                root = new ListNode(tot); curr = root;
            }
            else
            {
                curr.next = new ListNode(tot); curr = curr.next;
            }
        }
        
        curr = null; return root;
    }
}
