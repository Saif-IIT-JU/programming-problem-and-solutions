class Solution {
    int INF = 1000000000, n, dp[][], vis[][];
    List<List<Integer>> lst;
    
    int solve(int x, int y)
    {
        if(x>=n) return 0;
        if(y<0 || y>=n) return INF;
        if(vis[x][y]!=-1) return dp[x][y];
        
        int ret = INF;
        
        ret = Math.min(ret, lst.get(x).get(y) + solve(x+1, y));
        ret = Math.min(ret, lst.get(x).get(y) + solve(x+1, y+1));
        
        vis[x][y] = 1; return dp[x][y] = ret;
    }
    public int minimumTotal(List<List<Integer>> triangle) {
        n = triangle.size(); lst = triangle;
        dp = new int[n][]; vis = new int[n][];
        for(int i=0; i<n; i++)
        {
            vis[i] = new int[i+1];
            dp[i] = new int[i+1];
            for(int j=0; j<=i; j++)
            {
                vis[i][j] = -1;
            }
        }
        
        return solve(0,0);
    }
}
