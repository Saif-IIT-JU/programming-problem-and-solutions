public class Pair implements Comparable<Pair>
{
    int val, idx;
    Pair(int val, int idx)
    {
        this.val = val;
        this.idx = idx;
    }
    
    public int compareTo(Pair ob)
    {
        if(val==ob.val) return idx-ob.idx;
        return val-ob.val;
    }
}

class KthLargest {
    
    TreeSet<Pair>tree = new TreeSet<Pair>();
    int k, idx;

    public KthLargest(int k, int[] nums) {
        this.k = k; idx = 0;
        for(int i=0; i<nums.length; i++)
        {
            tree.add(new Pair(nums[i], ++idx));
        }
    }
    
    public int add(int val) {
        tree.add(new Pair(val, ++idx));
        while(tree.size()>k){
            Pair p = tree.first(); tree.remove(p);
        }
        
        Pair p = tree.first();
        return p.val;
    }
}

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */
