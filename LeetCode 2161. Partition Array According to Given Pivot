class Solution {
public:
    struct node{
        int val, idx, pivot;
        node(){}
        node(int v, int i, int piv)
        {
            val = v, idx = i, pivot = piv;
        }
        bool operator<(const node &nd)const{
            int flag1, flag2;
            if(val<pivot) flag1 = 0;
            else if(val==pivot) flag1 = 1;
            else flag1 = 2;
            
            if(nd.val<pivot) flag2 = 0;
            else if(nd.val==pivot) flag2 = 1;
            else flag2 = 2;
            
            if(flag1==flag2) return idx<nd.idx;
            else return flag1<flag2;
        }
    };
    vector<int> pivotArray(vector<int>& nums, int pivot) {
        vector<node>vv; int i;
        for(i=0; i<nums.size(); i++)
        {
            vv.push_back(node(nums[i], i, pivot));
        }
        sort(vv.begin(), vv.end());
        vector<int>ans;
        for(i=0; i<vv.size(); i++) ans.push_back(vv[i].val);
        
        return ans;
    }
};
